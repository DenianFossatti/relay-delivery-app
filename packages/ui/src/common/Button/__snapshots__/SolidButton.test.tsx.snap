// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Atoms/Button render component #Button_Button 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    [
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    accessibilityLabel="Button"
    accessibilityRole="button"
    accessible={false}
    collapsable={false}
    colorScheme="primary"
    dataSet={{}}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onHoverIn={[Function]}
    onHoverOut={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#12F2AA",
        "borderColor": "transparent",
        "borderRadius": 8,
        "borderWidth": 1,
        "flexDirection": "row",
        "justifyContent": "center",
        "paddingBottom": 10,
        "paddingLeft": 12,
        "paddingRight": 12,
        "paddingTop": 10,
      }
    }
    testID="Button_Button"
  >
    <View
      dataSet={{}}
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      test={true}
    >
      <View
        dataSet={{}}
        style={{}}
      >
        <Text
          dataSet={{}}
          style={
            {
              "backgroundColor": undefined,
              "color": "#323232",
              "fontFamily": "Quicksand-SemiBold",
              "fontSize": 14,
              "fontStyle": undefined,
              "fontWeight": undefined,
              "letterSpacing": 0,
              "lineHeight": 17,
              "textDecorationLine": undefined,
              "textTransform": "uppercase",
            }
          }
        >
          ButtonText
        </Text>
      </View>
    </View>
  </View>
</RNCSafeAreaProvider>
`;

exports[`Atoms/Button should call function one time when pressed 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    [
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    accessibilityLabel="Button"
    accessibilityRole="button"
    accessible={false}
    collapsable={false}
    colorScheme="primary"
    dataSet={{}}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onHoverIn={[Function]}
    onHoverOut={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#12F2AA",
        "borderColor": "transparent",
        "borderRadius": 8,
        "borderWidth": 1,
        "flexDirection": "row",
        "justifyContent": "center",
        "paddingBottom": 10,
        "paddingLeft": 12,
        "paddingRight": 12,
        "paddingTop": 10,
      }
    }
    testID="Button_Button"
  >
    <View
      dataSet={{}}
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      test={true}
    >
      <View
        dataSet={{}}
        style={{}}
      >
        <Text
          dataSet={{}}
          style={
            {
              "backgroundColor": undefined,
              "color": "#323232",
              "fontFamily": "Quicksand-SemiBold",
              "fontSize": 14,
              "fontStyle": undefined,
              "fontWeight": undefined,
              "letterSpacing": 0,
              "lineHeight": 17,
              "textDecorationLine": undefined,
              "textTransform": "uppercase",
            }
          }
        >
          ButtonText
        </Text>
      </View>
    </View>
  </View>
</RNCSafeAreaProvider>
`;

exports[`Atoms/Button should have text inside button 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    [
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    accessibilityLabel="Button"
    accessibilityRole="button"
    accessible={false}
    collapsable={false}
    colorScheme="primary"
    dataSet={{}}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onHoverIn={[Function]}
    onHoverOut={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#12F2AA",
        "borderColor": "transparent",
        "borderRadius": 8,
        "borderWidth": 1,
        "flexDirection": "row",
        "justifyContent": "center",
        "paddingBottom": 10,
        "paddingLeft": 12,
        "paddingRight": 12,
        "paddingTop": 10,
      }
    }
    testID="Button_Button"
  >
    <View
      dataSet={{}}
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      test={true}
    >
      <View
        dataSet={{}}
        style={{}}
      >
        <Text
          dataSet={{}}
          style={
            {
              "backgroundColor": undefined,
              "color": "#323232",
              "fontFamily": "Quicksand-SemiBold",
              "fontSize": 14,
              "fontStyle": undefined,
              "fontWeight": undefined,
              "letterSpacing": 0,
              "lineHeight": 17,
              "textDecorationLine": undefined,
              "textTransform": "uppercase",
            }
          }
        >
          ButtonText
        </Text>
      </View>
    </View>
  </View>
</RNCSafeAreaProvider>
`;
